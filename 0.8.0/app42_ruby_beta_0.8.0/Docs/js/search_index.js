var search_data = {"index":{"searchIndex":["app42","connection","restconnection","email","configuration","email","emailmime","emailresponsebuilder","emailservice","gallery","album","albumresponsebuilder","albumservice","photo","photoservice","game","game","gameresponsebuilder","gameservice","reward","rewardresponsebuilder","rewardservice","score","scoreboardservice","scoreservice","geo","geo","geopoint","georesponsebuilder","geoservice","point","imageprocessor","image","imageprocessorresponsebuilder","imageprocessorservice","log","log","logresponsebuilder","logservice","message","message","message","queue","queueresponsebuilder","queueservice","recommend","preferencedata","recommendeditem","recommender","recommenderresponsebuilder","recommenderservice","recommendersimilarity","review","review","reviewresponsebuilder","reviewservice","serviceapi","session","attribute","session","sessionresponsebuilder","sessionservice","shopping","cart","cartresponsebuilder","cartservice","catalogue","catalogueresponsebuilder","catalogueservice","category","item","itemdata","payment","paymentstatus","social","social","socialresponsebuilder","socialservice","storage","jsondocument","storage","storageresponsebuilder","storageservice","upload","file","upload","uploadfiletype","uploadresponsebuilder","uploadservice","user","profile","user","usergender","userresponsebuilder","userservice","util","app42badparameterexception","app42exception","app42limitexception","app42notfoundexception","app42response","app42responsebuilder","app42securityexception","geopoint()","addscore()","add_item()","add_item()","add_or_update_preference()","add_photo()","add_photo_with_stream()","add_tag_to_photo()","assign_roles()","authenticate()","buildalbumobject()","buildalbumservice()","buildarrayresponse()","buildarrayresponse()","buildarrayresponse()","buildarrayresponse()","buildarrayresponse()","buildarrayresponse()","buildarrayresponse()","buildarrayrewards()","buildcartobject()","buildcartservice()","buildcatalogueobject()","buildcatalogueservice()","buildemailservice()","buildgameobject()","buildgameservice()","buildgeoservice()","buildimageprocessorservice()","buildinternalobj()","buildjsondocument()","buildlogservice()","buildobjectfromjsontree()","buildphotoservice()","buildqueueservice()","buildrecommendservice()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildresponse()","buildreviewservice()","buildrewardobject()","buildrewardservice()","buildscoreboardservice()","buildscoreservice()","buildsessionresponse()","buildsessionservice()","buildsocialservice()","buildstorageservice()","builduploadservice()","builduserobject()","builduserservice()","build_and_send()","change_user_password()","check_out()","compute_hmac()","create_album()","create_cart()","create_catalogue()","create_category()","create_game()","create_geo_points()","create_mail_configuration()","create_or_update_profile()","create_pull_queue()","create_review()","create_reward()","create_user()","create_user_with_role()","crop()","crop_stream()","debug()","decrease_quantity()","deductscore()","delete()","delete_all_preferences()","delete_document_by_id()","delete_pull_queue()","delete_storage()","delete_user()","earn_rewards()","enum()","enum()","enum()","enum()","enum()","error()","extractfileextension()","fatal()","fetch_log_by_date_range()","fetch_log_by_date_range_by_paging()","fetch_logs_by_debug()","fetch_logs_by_debug_by_paging()","fetch_logs_by_error()","fetch_logs_by_error_by_paging()","fetch_logs_by_fatal()","fetch_logs_by_fatal_by_paging()","fetch_logs_by_info()","fetch_logs_by_info_by_paging()","fetch_logs_by_level()","fetch_logs_by_level_by_paging()","fetch_logs_by_module()","fetch_logs_by_module_and_text()","fetch_logs_by_module_and_text_by_paging()","fetch_logs_by_module_by_paging()","fetch_logs_count_by_date_range()","fetch_logs_count_by_debug()","fetch_logs_count_by_error()","fetch_logs_count_by_fatal()","fetch_logs_count_by_info()","fetch_logs_count_by_level()","fetch_logs_count_by_module()","fetch_logs_count_by_module_and_text()","fill_params_with_profile_data()","find_all_documents()","find_all_documents_by_paging()","find_all_documents_count()","find_document_by_id()","find_document_by_key_value()","get()","getjsonobject()","getnames()","getservicejsonobject()","gettotalrecords()","get_album_by_name()","get_albums()","get_albums_by_paging()","get_albums_count()","get_all_attribute()","get_all_files()","get_all_files_by_paging()","get_all_files_by_user()","get_all_files_by_user_by_paging()","get_all_files_count()","get_all_files_count_by_user()","get_all_games()","get_all_games_by_paging()","get_all_games_count()","get_all_points()","get_all_reviews()","get_all_reviews_by_paging()","get_all_reviews_count()","get_all_rewards()","get_all_rewards_by_paging()","get_all_rewards_count()","get_all_storage()","get_all_users()","get_all_users_by_paging()","get_all_users_count()","get_attribute()","get_average_review_by_item()","get_average_score_by_user()","get_cart_details()","get_email_configurations()","get_file_by_name()","get_file_by_user()","get_files_by_type()","get_files_by_type_by_paging()","get_files_count_by_type()","get_game_by_name()","get_game_reward_points_for_user()","get_highest_review_by_item()","get_highest_score_by_user()","get_item()","get_item_by_id()","get_items()","get_items()","get_items_by_category()","get_items_by_category_by_paging()","get_items_count_by_category()","get_json_from_map()","get_locked_users()","get_locked_users_by_paging()","get_locked_users_count()","get_lowest_review_by_item()","get_lowest_score_by_user()","get_messages()","get_near_by_point()","get_near_by_points_by_max_distance()","get_payment_by_cart()","get_payment_history_all()","get_payment_history_by_user()","get_payments_by_status()","get_payments_by_user()","get_payments_by_user_and_status()","get_photos()","get_photos_by_album_and_photo_name()","get_photos_by_album_name()","get_photos_by_album_name_by_paging()","get_photos_count_by_album_name()","get_points_with_in_circle()","get_review_by_item_by_paging()","get_reviews_by_item()","get_reviews_count_by_item()","get_reward_by_name()","get_roles_by_user()","get_scores_by_user()","get_session()","get_session_boolean()","get_tagged_photos()","get_timestamp_utc()","get_timestamp_utc_from_date()","get_top_n_rankings()","get_top_rankings()","get_user()","get_user_by_email_id()","get_user_ranking()","get_users_by_profile_data()","get_users_by_role()","imagemultipart()","imagemultipartstream()","increase_quantity()","info()","initialize1()","initialize1()","initialize2()","initialize3()","initialize3()","insert_json_doc_using_map()","insert_json_document()","invalidate()","isavailable()","isavailable()","isavailable()","isavailable()","isavailable()","isresponsesuccess()","is_empty()","item_based()","item_based_by_similarity_for_all()","item_based_by_similarity()","item_based_for_all()","link_user_facebook_account()","link_user_facebook_account_with_token()","link_user_linkedin_account()","link_user_linkedin_account_with_token()","link_user_twitter_account()","link_user_twitter_account_with_token()","load_preference_file()","load_preference_file_stream()","lock_user()","map_reduce()","multipart()","multipartstream()","mute()","my_strip()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","new()","payment()","pending_messages()","photomultipart()","photomultipartstream()","post()","purge_pull_queue()","put()","receive_message()","receive_message_by_correlation_id()","recommendmultipart()","recommendmultipartstream()","redeem_rewards()","remove_al_items()","remove_album()","remove_all_attribute()","remove_all_files()","remove_all_files_by_user()","remove_all_items()","remove_attribute()","remove_email_configuration()","remove_file_by_name()","remove_file_by_user()","remove_item()","remove_item_by_id()","remove_items_by_category()","remove_message()","remove_photo()","reset_user_password()","resize()","resize_by_percentage()","resize_by_percentage_by_stream()","resize_stream()","revoke_all_roles()","revoke_role()","save_user_score()","scale()","scale_by_percentage()","scale_by_percentage_stream()","scale_stream()","send_mail()","send_message()","settaglist()","set_attribute()","shopmultipart()","sign()","slope_one()","slope_one_for_all()","sort_convert_table()","throwexceptionifemailnotvalid()","throwexceptionifnotvalidextension()","throwexceptionifnotvalidimageextension()","throwexceptionifnullorblank()","thumbnail()","thumbnail_by_percentage()","thumbnail_by_percentage_stream()","thumbnail_stream()","tostring()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","to_s()","unlock_user()","unmute()","update_document_by_doc_id()","update_document_by_key_value()","update_email()","update_facebook_status()","update_linkedin_status()","update_social_status_for_all()","update_twitter_status()","upload_file()","upload_file_by_stream()","upload_file_for_user()","upload_file_for_user_by_stream()","user_based_neighborhood()","user_based_neighborhood_by_similarity()","user_based_neighborhood_by_similarity_for_all()","user_based_neighborhood_for_all()","user_based_threshold()","user_based_threshold_by_similarity_for_all()","user_based_threshold_for_all()","validatehowmany()","validatemax()"],"longSearchIndex":["app42","app42::connection","app42::connection::restconnection","app42::email","app42::email::configuration","app42::email::email","app42::email::emailmime","app42::email::emailresponsebuilder","app42::email::emailservice","app42::gallery","app42::gallery::album","app42::gallery::albumresponsebuilder","app42::gallery::albumservice","app42::gallery::photo","app42::gallery::photoservice","app42::game","app42::game::game","app42::game::gameresponsebuilder","app42::game::gameservice","app42::game::reward","app42::game::rewardresponsebuilder","app42::game::rewardservice","app42::game::score","app42::game::scoreboardservice","app42::game::scoreservice","app42::geo","app42::geo::geo","app42::geo::geopoint","app42::geo::georesponsebuilder","app42::geo::geoservice","app42::geo::point","app42::imageprocessor","app42::imageprocessor::image","app42::imageprocessor::imageprocessorresponsebuilder","app42::imageprocessor::imageprocessorservice","app42::log","app42::log::log","app42::log::logresponsebuilder","app42::log::logservice","app42::log::message","app42::message","app42::message::message","app42::message::queue","app42::message::queueresponsebuilder","app42::message::queueservice","app42::recommend","app42::recommend::preferencedata","app42::recommend::recommendeditem","app42::recommend::recommender","app42::recommend::recommenderresponsebuilder","app42::recommend::recommenderservice","app42::recommend::recommendersimilarity","app42::review","app42::review::review","app42::review::reviewresponsebuilder","app42::review::reviewservice","app42::serviceapi","app42::session","app42::session::attribute","app42::session::session","app42::session::sessionresponsebuilder","app42::session::sessionservice","app42::shopping","app42::shopping::cart","app42::shopping::cartresponsebuilder","app42::shopping::cartservice","app42::shopping::catalogue","app42::shopping::catalogueresponsebuilder","app42::shopping::catalogueservice","app42::shopping::category","app42::shopping::item","app42::shopping::itemdata","app42::shopping::payment","app42::shopping::paymentstatus","app42::social","app42::social::social","app42::social::socialresponsebuilder","app42::social::socialservice","app42::storage","app42::storage::jsondocument","app42::storage::storage","app42::storage::storageresponsebuilder","app42::storage::storageservice","app42::upload","app42::upload::file","app42::upload::upload","app42::upload::uploadfiletype","app42::upload::uploadresponsebuilder","app42::upload::uploadservice","app42::user","app42::user::profile","app42::user::user","app42::user::user::usergender","app42::user::userresponsebuilder","app42::user::userservice","app42::util","app42badparameterexception","app42exception","app42limitexception","app42notfoundexception","app42response","app42responsebuilder","app42securityexception","app42::geo::geopoint#geopoint()","app42::game::scoreservice#addscore()","app42::shopping::cartservice#add_item()","app42::shopping::catalogueservice#add_item()","app42::recommend::recommenderservice#add_or_update_preference()","app42::gallery::photoservice#add_photo()","app42::gallery::photoservice#add_photo_with_stream()","app42::gallery::photoservice#add_tag_to_photo()","app42::user::userservice#assign_roles()","app42::user::userservice#authenticate()","app42::gallery::albumresponsebuilder#buildalbumobject()","app42::serviceapi#buildalbumservice()","app42::gallery::albumresponsebuilder#buildarrayresponse()","app42::game::gameresponsebuilder#buildarrayresponse()","app42::geo::georesponsebuilder#buildarrayresponse()","app42::review::reviewresponsebuilder#buildarrayresponse()","app42::shopping::cartresponsebuilder#buildarrayresponse()","app42::shopping::catalogueresponsebuilder#buildarrayresponse()","app42::user::userresponsebuilder#buildarrayresponse()","app42::game::rewardresponsebuilder#buildarrayrewards()","app42::shopping::cartresponsebuilder#buildcartobject()","app42::serviceapi#buildcartservice()","app42::shopping::catalogueresponsebuilder#buildcatalogueobject()","app42::serviceapi#buildcatalogueservice()","app42::serviceapi#buildemailservice()","app42::game::gameresponsebuilder#buildgameobject()","app42::serviceapi#buildgameservice()","app42::serviceapi#buildgeoservice()","app42::serviceapi#buildimageprocessorservice()","app42::geo::georesponsebuilder#buildinternalobj()","app42::storage::storageresponsebuilder#buildjsondocument()","app42::serviceapi#buildlogservice()","app42responsebuilder#buildobjectfromjsontree()","app42::serviceapi#buildphotoservice()","app42::serviceapi#buildqueueservice()","app42::serviceapi#buildrecommendservice()","app42::email::emailresponsebuilder#buildresponse()","app42::gallery::albumresponsebuilder#buildresponse()","app42::game::gameresponsebuilder#buildresponse()","app42::game::rewardresponsebuilder#buildresponse()","app42::geo::georesponsebuilder#buildresponse()","app42::imageprocessor::imageprocessorresponsebuilder#buildresponse()","app42::log::logresponsebuilder#buildresponse()","app42::message::queueresponsebuilder#buildresponse()","app42::recommend::recommenderresponsebuilder#buildresponse()","app42::review::reviewresponsebuilder#buildresponse()","app42::shopping::cartresponsebuilder#buildresponse()","app42::shopping::catalogueresponsebuilder#buildresponse()","app42::social::socialresponsebuilder#buildresponse()","app42::storage::storageresponsebuilder#buildresponse()","app42::upload::uploadresponsebuilder#buildresponse()","app42::user::userresponsebuilder#buildresponse()","app42::serviceapi#buildreviewservice()","app42::game::rewardresponsebuilder#buildrewardobject()","app42::serviceapi#buildrewardservice()","app42::serviceapi#buildscoreboardservice()","app42::serviceapi#buildscoreservice()","app42::session::sessionresponsebuilder#buildsessionresponse()","app42::serviceapi#buildsessionservice()","app42::serviceapi#buildsocialservice()","app42::serviceapi#buildstorageservice()","app42::serviceapi#builduploadservice()","app42::user::userresponsebuilder#builduserobject()","app42::serviceapi#builduserservice()","app42::log::logservice#build_and_send()","app42::user::userservice#change_user_password()","app42::shopping::cartservice#check_out()","app42::util#compute_hmac()","app42::gallery::albumservice#create_album()","app42::shopping::cartservice#create_cart()","app42::shopping::catalogueservice#create_catalogue()","app42::shopping::catalogueservice#create_category()","app42::game::gameservice#create_game()","app42::geo::geoservice#create_geo_points()","app42::email::emailservice#create_mail_configuration()","app42::user::userservice#create_or_update_profile()","app42::message::queueservice#create_pull_queue()","app42::review::reviewservice#create_review()","app42::game::rewardservice#create_reward()","app42::user::userservice#create_user()","app42::user::userservice#create_user_with_role()","app42::imageprocessor::imageprocessorservice#crop()","app42::imageprocessor::imageprocessorservice#crop_stream()","app42::log::logservice#debug()","app42::shopping::cartservice#decrease_quantity()","app42::game::scoreservice#deductscore()","app42::connection::restconnection#delete()","app42::recommend::recommenderservice#delete_all_preferences()","app42::storage::storageservice#delete_document_by_id()","app42::message::queueservice#delete_pull_queue()","app42::geo::geoservice#delete_storage()","app42::user::userservice#delete_user()","app42::game::rewardservice#earn_rewards()","app42::email::emailmime#enum()","app42::recommend::recommendersimilarity#enum()","app42::shopping::paymentstatus#enum()","app42::upload::uploadfiletype#enum()","app42::user::user::usergender#enum()","app42::log::logservice#error()","app42::util#extractfileextension()","app42::log::logservice#fatal()","app42::log::logservice#fetch_log_by_date_range()","app42::log::logservice#fetch_log_by_date_range_by_paging()","app42::log::logservice#fetch_logs_by_debug()","app42::log::logservice#fetch_logs_by_debug_by_paging()","app42::log::logservice#fetch_logs_by_error()","app42::log::logservice#fetch_logs_by_error_by_paging()","app42::log::logservice#fetch_logs_by_fatal()","app42::log::logservice#fetch_logs_by_fatal_by_paging()","app42::log::logservice#fetch_logs_by_info()","app42::log::logservice#fetch_logs_by_info_by_paging()","app42::log::logservice#fetch_logs_by_level()","app42::log::logservice#fetch_logs_by_level_by_paging()","app42::log::logservice#fetch_logs_by_module()","app42::log::logservice#fetch_logs_by_module_and_text()","app42::log::logservice#fetch_logs_by_module_and_text_by_paging()","app42::log::logservice#fetch_logs_by_module_by_paging()","app42::log::logservice#fetch_logs_count_by_date_range()","app42::log::logservice#fetch_logs_count_by_debug()","app42::log::logservice#fetch_logs_count_by_error()","app42::log::logservice#fetch_logs_count_by_fatal()","app42::log::logservice#fetch_logs_count_by_info()","app42::log::logservice#fetch_logs_count_by_level()","app42::log::logservice#fetch_logs_count_by_module()","app42::log::logservice#fetch_logs_count_by_module_and_text()","app42::user::userservice#fill_params_with_profile_data()","app42::storage::storageservice#find_all_documents()","app42::storage::storageservice#find_all_documents_by_paging()","app42::storage::storageservice#find_all_documents_count()","app42::storage::storageservice#find_document_by_id()","app42::storage::storageservice#find_document_by_key_value()","app42::connection::restconnection#get()","app42::geo::geopoint#getjsonobject()","app42responsebuilder#getnames()","app42responsebuilder#getservicejsonobject()","app42responsebuilder#gettotalrecords()","app42::gallery::albumservice#get_album_by_name()","app42::gallery::albumservice#get_albums()","app42::gallery::albumservice#get_albums_by_paging()","app42::gallery::albumservice#get_albums_count()","app42::session::sessionservice#get_all_attribute()","app42::upload::uploadservice#get_all_files()","app42::upload::uploadservice#get_all_files_by_paging()","app42::upload::uploadservice#get_all_files_by_user()","app42::upload::uploadservice#get_all_files_by_user_by_paging()","app42::upload::uploadservice#get_all_files_count()","app42::upload::uploadservice#get_all_files_count_by_user()","app42::game::gameservice#get_all_games()","app42::game::gameservice#get_all_games_by_paging()","app42::game::gameservice#get_all_games_count()","app42::geo::geoservice#get_all_points()","app42::review::reviewservice#get_all_reviews()","app42::review::reviewservice#get_all_reviews_by_paging()","app42::review::reviewservice#get_all_reviews_count()","app42::game::rewardservice#get_all_rewards()","app42::game::rewardservice#get_all_rewards_by_paging()","app42::game::rewardservice#get_all_rewards_count()","app42::geo::geoservice#get_all_storage()","app42::user::userservice#get_all_users()","app42::user::userservice#get_all_users_by_paging()","app42::user::userservice#get_all_users_count()","app42::session::sessionservice#get_attribute()","app42::review::reviewservice#get_average_review_by_item()","app42::game::scoreboardservice#get_average_score_by_user()","app42::shopping::cartservice#get_cart_details()","app42::email::emailservice#get_email_configurations()","app42::upload::uploadservice#get_file_by_name()","app42::upload::uploadservice#get_file_by_user()","app42::upload::uploadservice#get_files_by_type()","app42::upload::uploadservice#get_files_by_type_by_paging()","app42::upload::uploadservice#get_files_count_by_type()","app42::game::gameservice#get_game_by_name()","app42::game::rewardservice#get_game_reward_points_for_user()","app42::review::reviewservice#get_highest_review_by_item()","app42::game::scoreboardservice#get_highest_score_by_user()","app42::shopping::cartservice#get_item()","app42::shopping::catalogueservice#get_item_by_id()","app42::shopping::cartservice#get_items()","app42::shopping::catalogueservice#get_items()","app42::shopping::catalogueservice#get_items_by_category()","app42::shopping::catalogueservice#get_items_by_category_by_paging()","app42::shopping::catalogueservice#get_items_count_by_category()","app42::storage::storageservice#get_json_from_map()","app42::user::userservice#get_locked_users()","app42::user::userservice#get_locked_users_by_paging()","app42::user::userservice#get_locked_users_count()","app42::review::reviewservice#get_lowest_review_by_item()","app42::game::scoreboardservice#get_lowest_score_by_user()","app42::message::queueservice#get_messages()","app42::geo::geoservice#get_near_by_point()","app42::geo::geoservice#get_near_by_points_by_max_distance()","app42::shopping::cartservice#get_payment_by_cart()","app42::shopping::cartservice#get_payment_history_all()","app42::shopping::cartservice#get_payment_history_by_user()","app42::shopping::cartservice#get_payments_by_status()","app42::shopping::cartservice#get_payments_by_user()","app42::shopping::cartservice#get_payments_by_user_and_status()","app42::gallery::photoservice#get_photos()","app42::gallery::photoservice#get_photos_by_album_and_photo_name()","app42::gallery::photoservice#get_photos_by_album_name()","app42::gallery::photoservice#get_photos_by_album_name_by_paging()","app42::gallery::photoservice#get_photos_count_by_album_name()","app42::geo::geoservice#get_points_with_in_circle()","app42::review::reviewservice#get_review_by_item_by_paging()","app42::review::reviewservice#get_reviews_by_item()","app42::review::reviewservice#get_reviews_count_by_item()","app42::game::rewardservice#get_reward_by_name()","app42::user::userservice#get_roles_by_user()","app42::game::scoreboardservice#get_scores_by_user()","app42::session::sessionservice#get_session()","app42::session::sessionservice#get_session_boolean()","app42::gallery::photoservice#get_tagged_photos()","app42::util#get_timestamp_utc()","app42::util#get_timestamp_utc_from_date()","app42::game::scoreboardservice#get_top_n_rankings()","app42::game::scoreboardservice#get_top_rankings()","app42::user::userservice#get_user()","app42::user::userservice#get_user_by_email_id()","app42::game::scoreboardservice#get_user_ranking()","app42::user::userservice#get_users_by_profile_data()","app42::user::userservice#get_users_by_role()","app42::connection::restconnection#imagemultipart()","app42::connection::restconnection#imagemultipartstream()","app42::shopping::cartservice#increase_quantity()","app42::log::logservice#info()","app42badparameterexception#initialize1()","app42exception#initialize1()","app42exception#initialize2()","app42badparameterexception#initialize3()","app42exception#initialize3()","app42::storage::storageservice#insert_json_doc_using_map()","app42::storage::storageservice#insert_json_document()","app42::session::sessionservice#invalidate()","app42::email::emailmime#isavailable()","app42::recommend::recommendersimilarity#isavailable()","app42::shopping::paymentstatus#isavailable()","app42::upload::uploadfiletype#isavailable()","app42::user::user::usergender#isavailable()","app42responsebuilder#isresponsesuccess()","app42::shopping::cartservice#is_empty()","app42::recommend::recommenderservice#item_based()","app42::recommend::recommenderservice#item_based_by_similarity_for_all()","app42::recommend::recommenderservice#item_based_by_similarity()","app42::recommend::recommenderservice#item_based_for_all()","app42::social::socialservice#link_user_facebook_account()","app42::social::socialservice#link_user_facebook_account_with_token()","app42::social::socialservice#link_user_linkedin_account()","app42::social::socialservice#link_user_linkedin_account_with_token()","app42::social::socialservice#link_user_twitter_account()","app42::social::socialservice#link_user_twitter_account_with_token()","app42::recommend::recommenderservice#load_preference_file()","app42::recommend::recommenderservice#load_preference_file_stream()","app42::user::userservice#lock_user()","app42::storage::storageservice#map_reduce()","app42::connection::restconnection#multipart()","app42::connection::restconnection#multipartstream()","app42::review::reviewservice#mute()","app42::util#my_strip()","app42::connection::restconnection::new()","app42::email::configuration::new()","app42::email::emailservice::new()","app42::gallery::albumservice::new()","app42::gallery::photo::new()","app42::gallery::photoservice::new()","app42::game::gameservice::new()","app42::game::rewardservice::new()","app42::game::score::new()","app42::game::scoreboardservice::new()","app42::game::scoreservice::new()","app42::geo::geoservice::new()","app42::geo::point::new()","app42::imageprocessor::imageprocessorservice::new()","app42::log::logservice::new()","app42::log::message::new()","app42::message::message::new()","app42::message::queueservice::new()","app42::recommend::recommendeditem::new()","app42::recommend::recommenderservice::new()","app42::review::reviewservice::new()","app42::serviceapi::new()","app42::session::attribute::new()","app42::session::sessionservice::new()","app42::shopping::cartservice::new()","app42::shopping::catalogueservice::new()","app42::shopping::category::new()","app42::shopping::item::new()","app42::shopping::payment::new()","app42::social::socialservice::new()","app42::storage::jsondocument::new()","app42::storage::storageservice::new()","app42::upload::file::new()","app42::upload::uploadservice::new()","app42::user::profile::new()","app42::user::userservice::new()","app42badparameterexception::new()","app42exception::new()","app42limitexception::new()","app42notfoundexception::new()","app42securityexception::new()","app42::shopping::cartservice#payment()","app42::message::queueservice#pending_messages()","app42::connection::restconnection#photomultipart()","app42::connection::restconnection#photomultipartstream()","app42::connection::restconnection#post()","app42::message::queueservice#purge_pull_queue()","app42::connection::restconnection#put()","app42::message::queueservice#receive_message()","app42::message::queueservice#receive_message_by_correlation_id()","app42::connection::restconnection#recommendmultipart()","app42::connection::restconnection#recommendmultipartstream()","app42::game::rewardservice#redeem_rewards()","app42::shopping::catalogueservice#remove_al_items()","app42::gallery::albumservice#remove_album()","app42::session::sessionservice#remove_all_attribute()","app42::upload::uploadservice#remove_all_files()","app42::upload::uploadservice#remove_all_files_by_user()","app42::shopping::cartservice#remove_all_items()","app42::session::sessionservice#remove_attribute()","app42::email::emailservice#remove_email_configuration()","app42::upload::uploadservice#remove_file_by_name()","app42::upload::uploadservice#remove_file_by_user()","app42::shopping::cartservice#remove_item()","app42::shopping::catalogueservice#remove_item_by_id()","app42::shopping::catalogueservice#remove_items_by_category()","app42::message::queueservice#remove_message()","app42::gallery::photoservice#remove_photo()","app42::user::userservice#reset_user_password()","app42::imageprocessor::imageprocessorservice#resize()","app42::imageprocessor::imageprocessorservice#resize_by_percentage()","app42::imageprocessor::imageprocessorservice#resize_by_percentage_by_stream()","app42::imageprocessor::imageprocessorservice#resize_stream()","app42::user::userservice#revoke_all_roles()","app42::user::userservice#revoke_role()","app42::game::scoreboardservice#save_user_score()","app42::imageprocessor::imageprocessorservice#scale()","app42::imageprocessor::imageprocessorservice#scale_by_percentage()","app42::imageprocessor::imageprocessorservice#scale_by_percentage_stream()","app42::imageprocessor::imageprocessorservice#scale_stream()","app42::email::emailservice#send_mail()","app42::message::queueservice#send_message()","app42::gallery::albumresponsebuilder#settaglist()","app42::session::sessionservice#set_attribute()","app42::connection::restconnection#shopmultipart()","app42::util#sign()","app42::recommend::recommenderservice#slope_one()","app42::recommend::recommenderservice#slope_one_for_all()","app42::util#sort_convert_table()","app42::util#throwexceptionifemailnotvalid()","app42::util#throwexceptionifnotvalidextension()","app42::util#throwexceptionifnotvalidimageextension()","app42::util#throwexceptionifnullorblank()","app42::imageprocessor::imageprocessorservice#thumbnail()","app42::imageprocessor::imageprocessorservice#thumbnail_by_percentage()","app42::imageprocessor::imageprocessorservice#thumbnail_by_percentage_stream()","app42::imageprocessor::imageprocessorservice#thumbnail_stream()","app42::shopping::item#tostring()","app42::email::configuration#to_s()","app42::gallery::photo#to_s()","app42::geo::point#to_s()","app42::imageprocessor::image#to_s()","app42::log::message#to_s()","app42::message::message#to_s()","app42::recommend::recommendeditem#to_s()","app42::review::review#to_s()","app42::shopping::category#to_s()","app42::shopping::item#to_s()","app42::storage::jsondocument#to_s()","app42::user::user#to_s()","app42::user::userservice#unlock_user()","app42::review::reviewservice#unmute()","app42::storage::storageservice#update_document_by_doc_id()","app42::storage::storageservice#update_document_by_key_value()","app42::user::userservice#update_email()","app42::social::socialservice#update_facebook_status()","app42::social::socialservice#update_linkedin_status()","app42::social::socialservice#update_social_status_for_all()","app42::social::socialservice#update_twitter_status()","app42::upload::uploadservice#upload_file()","app42::upload::uploadservice#upload_file_by_stream()","app42::upload::uploadservice#upload_file_for_user()","app42::upload::uploadservice#upload_file_for_user_by_stream()","app42::recommend::recommenderservice#user_based_neighborhood()","app42::recommend::recommenderservice#user_based_neighborhood_by_similarity()","app42::recommend::recommenderservice#user_based_neighborhood_by_similarity_for_all()","app42::recommend::recommenderservice#user_based_neighborhood_for_all()","app42::recommend::recommenderservice#user_based_threshold()","app42::recommend::recommenderservice#user_based_threshold_by_similarity_for_all()","app42::recommend::recommenderservice#user_based_threshold_for_all()","app42::util#validatehowmany()","app42::util#validatemax()"],"info":[["App42","","App42.html","","<p>@author Jatin Chauhan\n\n<pre>Copyright ┬⌐ 2012 ShepHertz Technologies Pvt Ltd. All rights reserved.</pre>\n\n<pre>Copyright ...</pre>\n"],["App42::Connection","","App42/Connection.html","",""],["App42::Connection::RESTConnection","","App42/Connection/RESTConnection.html","",""],["App42::Email","","App42/Email.html","",""],["App42::Email::Configuration","","App42/Email/Configuration.html","",""],["App42::Email::Email","","App42/Email/Email.html","",""],["App42::Email::EmailMIME","","App42/Email/EmailMIME.html","",""],["App42::Email::EmailResponseBuilder","","App42/Email/EmailResponseBuilder.html","",""],["App42::Email::EmailService","","App42/Email/EmailService.html","","<p>Service to send Email @see Email\n"],["App42::Gallery","","App42/Gallery.html","",""],["App42::Gallery::Album","","App42/Gallery/Album.html","",""],["App42::Gallery::AlbumResponseBuilder","","App42/Gallery/AlbumResponseBuilder.html","",""],["App42::Gallery::AlbumService","","App42/Gallery/AlbumService.html","","<p>Create Photo Gallery on the cloud. This service allows to manage i.e.\ncreate, retrieve and remove albums ...\n"],["App42::Gallery::Photo","","App42/Gallery/Photo.html","",""],["App42::Gallery::PhotoService","","App42/Gallery/PhotoService.html","","<p>Adds Photo to the created Album on the Cloud All photos for a given Album\ncan be managed through this ...\n"],["App42::Game","","App42/Game.html","",""],["App42::Game::Game","","App42/Game/Game.html","",""],["App42::Game::GameResponseBuilder","","App42/Game/GameResponseBuilder.html","",""],["App42::Game::GameService","","App42/Game/GameService.html","","<p>The Game service allows Game, User, Score and ScoreBoard Management on the\nCloud. The service allows ...\n"],["App42::Game::Reward","","App42/Game/Reward.html","",""],["App42::Game::RewardResponseBuilder","","App42/Game/RewardResponseBuilder.html","",""],["App42::Game::RewardService","","App42/Game/RewardService.html","","<p>Define a Reward e.g. Sword, Energy etc. Is needed for Reward Points The\nGame service allows Game, User ...\n"],["App42::Game::Score","","App42/Game/Score.html","",""],["App42::Game::ScoreBoardService","","App42/Game/ScoreBoardService.html","","<p>ScoreBoard allows storing, retrieving, querying and ranking scores for\nusers and Games across Game Session ...\n"],["App42::Game::ScoreService","","App42/Game/ScoreService.html","","<p>Allows ingame scoring. It has to be used for scoring for a parituclar Game\nSession. If scores have to ...\n"],["App42::Geo","","App42/Geo.html","",""],["App42::Geo::Geo","","App42/Geo/Geo.html","",""],["App42::Geo::GeoPoint","","App42/Geo/GeoPoint.html","",""],["App42::Geo::GeoResponseBuilder","","App42/Geo/GeoResponseBuilder.html","",""],["App42::Geo::GeoService","","App42/Geo/GeoService.html","","<p>Geo Spatial Service on cloud provides the storage, retrieval, querying and\nupdation of geo data. One ...\n"],["App42::Geo::Point","","App42/Geo/Point.html","",""],["App42::ImageProcessor","","App42/ImageProcessor.html","",""],["App42::ImageProcessor::Image","","App42/ImageProcessor/Image.html","",""],["App42::ImageProcessor::ImageProcessorResponseBuilder","","App42/ImageProcessor/ImageProcessorResponseBuilder.html","",""],["App42::ImageProcessor::ImageProcessorService","","App42/ImageProcessor/ImageProcessorService.html","","<p>The ImageProcessor service is a Image utility service on the Cloud.\nDevelopers can upload files on the ...\n"],["App42::Log","","App42/Log.html","",""],["App42::Log::Log","","App42/Log/Log.html","",""],["App42::Log::LogResponseBuilder","","App42/Log/LogResponseBuilder.html","",""],["App42::Log::LogService","","App42/Log/LogService.html","","<p>Centralize logging for your App. This service allows different levels e.g.\ninfo, debug, fatal, error ...\n"],["App42::Log::Message","","App42/Log/Message.html","",""],["App42::Message","","App42/Message.html","",""],["App42::Message::Message","","App42/Message/Message.html","",""],["App42::Message::Queue","","App42/Message/Queue.html","",""],["App42::Message::QueueResponseBuilder","","App42/Message/QueueResponseBuilder.html","",""],["App42::Message::QueueService","","App42/Message/QueueService.html","","<p>Manages Asynchronous queues. Allows to create, delete, purge messages, view\npending messages and get ...\n"],["App42::Recommend","","App42/Recommend.html","",""],["App42::Recommend::PreferenceData","","App42/Recommend/PreferenceData.html","",""],["App42::Recommend::RecommendedItem","","App42/Recommend/RecommendedItem.html","",""],["App42::Recommend::Recommender","","App42/Recommend/Recommender.html","",""],["App42::Recommend::RecommenderResponseBuilder","","App42/Recommend/RecommenderResponseBuilder.html","",""],["App42::Recommend::RecommenderService","","App42/Recommend/RecommenderService.html","","<p>Recommendation engine which provides reommendation based on customer id,\nitem id and the preference of ...\n"],["App42::Recommend::RecommenderSimilarity","","App42/Recommend/RecommenderSimilarity.html","",""],["App42::Review","","App42/Review.html","",""],["App42::Review::Review","","App42/Review/Review.html","",""],["App42::Review::ReviewResponseBuilder","","App42/Review/ReviewResponseBuilder.html","",""],["App42::Review::ReviewService","","App42/Review/ReviewService.html","","<p>The service is a Review &amp; Rating manager for any item. The item can be\nanything which has an id  ...\n"],["App42::ServiceAPI","","App42/ServiceAPI.html","",""],["App42::Session","","App42/Session.html","",""],["App42::Session::Attribute","","App42/Session/Attribute.html","",""],["App42::Session::Session","","App42/Session/Session.html","",""],["App42::Session::SessionResponseBuilder","","App42/Session/SessionResponseBuilder.html","",""],["App42::Session::SessionService","","App42/Session/SessionService.html","","<p>The Session Manager manages user sessions on the server side. It is a\npersistent Session Manager. It ...\n"],["App42::Shopping","","App42/Shopping.html","",""],["App42::Shopping::Cart","","App42/Shopping/Cart.html","",""],["App42::Shopping::CartResponseBuilder","","App42/Shopping/CartResponseBuilder.html","",""],["App42::Shopping::CartService","","App42/Shopping/CartService.html","","<p>This is Cloud Persistent Shopping Cart Service. App Developers can use this\nto create a Shopping Cart ...\n"],["App42::Shopping::Catalogue","","App42/Shopping/Catalogue.html","",""],["App42::Shopping::CatalogueResponseBuilder","","App42/Shopping/CatalogueResponseBuilder.html","",""],["App42::Shopping::CatalogueService","","App42/Shopping/CatalogueService.html","","<p>This Service provides a complete cloud based catalogue management. An app\ncan keep all its items based ...\n"],["App42::Shopping::Category","","App42/Shopping/Category.html","",""],["App42::Shopping::Item","","App42/Shopping/Item.html","",""],["App42::Shopping::ItemData","","App42/Shopping/ItemData.html","",""],["App42::Shopping::Payment","","App42/Shopping/Payment.html","",""],["App42::Shopping::PaymentStatus","","App42/Shopping/PaymentStatus.html","",""],["App42::Social","","App42/Social.html","",""],["App42::Social::Social","","App42/Social/Social.html","",""],["App42::Social::SocialResponseBuilder","","App42/Social/SocialResponseBuilder.html","",""],["App42::Social::SocialService","","App42/Social/SocialService.html","",""],["App42::Storage","","App42/Storage.html","",""],["App42::Storage::JSONDocument","","App42/Storage/JSONDocument.html","",""],["App42::Storage::Storage","","App42/Storage/Storage.html","",""],["App42::Storage::StorageResponseBuilder","","App42/Storage/StorageResponseBuilder.html","",""],["App42::Storage::StorageService","","App42/Storage/StorageService.html","","<p>Storage service on cloud provides the way to store the JSON document in\nNoSQL database running on cloud. ...\n"],["App42::Upload","","App42/Upload.html","",""],["App42::Upload::File","","App42/Upload/File.html","",""],["App42::Upload::Upload","","App42/Upload/Upload.html","",""],["App42::Upload::UploadFileType","","App42/Upload/UploadFileType.html","",""],["App42::Upload::UploadResponseBuilder","","App42/Upload/UploadResponseBuilder.html","",""],["App42::Upload::UploadService","","App42/Upload/UploadService.html","","<p>Uploads file on the cloud. Allows access to the files through url. Its\nespecially useful for Mobile/Device ...\n"],["App42::User","","App42/User.html","",""],["App42::User::Profile","","App42/User/Profile.html","",""],["App42::User::User","","App42/User/User.html","",""],["App42::User::User::UserGender","","App42/User/User/UserGender.html","",""],["App42::User::UserResponseBuilder","","App42/User/UserResponseBuilder.html","",""],["App42::User::UserService","","App42/User/UserService.html","","<p>Creates User for the App. App42 Cloud API's provides a complete User\nManagement for any Mobile or Web ...\n"],["App42::Util","","App42/Util.html","",""],["App42BadParameterException","","App42BadParameterException.html","",""],["App42Exception","","App42Exception.html","","\n<pre>Copyright ┬⌐ 2012 ShepHertz Technologies Pvt Ltd. All rights reserved.</pre>\n"],["App42LimitException","","App42LimitException.html","",""],["App42NotFoundException","","App42NotFoundException.html","",""],["App42Response","","App42Response.html","","\n<pre>Copyright ┬⌐ 2012 ShepHertz Technologies Pvt Ltd. All rights reserved.</pre>\n"],["App42ResponseBuilder","","App42ResponseBuilder.html","",""],["App42SecurityException","","App42SecurityException.html","",""],["GeoPoint","App42::Geo::GeoPoint","App42/Geo/GeoPoint.html#method-i-GeoPoint","(lat, lng, marker)",""],["addScore","App42::Game::ScoreService","App42/Game/ScoreService.html#method-i-addScore","(gameName, gameUserName, gameScore)","<p>Adds game score for the specified user. @param gameName - Name of the game\nfor which scores have to be ...\n"],["add_item","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-add_item","(cartID, itemID, itemQuantity, price)","<p>Adds an Item in the Cart with quantity and price. This method does not take\ncurrency. Its the bonus of ...\n"],["add_item","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-add_item","(catalogueName, categoryName, itemData)","<p>Creates a Item in a Category for a particular Catelogue @params\ncatalogueName Name of the Catalogue to ...\n"],["add_or_update_preference","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-add_or_update_preference","(preferenceDataList)",""],["add_photo","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-add_photo","(userName, albumName, photoName, photoDescription, path)","<p>Adds Photo for a particular user and album. The Photo is uploaded on the\ncloud @param userName Name of ...\n"],["add_photo_with_stream","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-add_photo_with_stream","(userName, albumName, photoName, photoDescription, spath)","<p>Adds Photo for a particular user and album. The Photo is uploaded on the\ncloud @param userName Name of ...\n"],["add_tag_to_photo","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-add_tag_to_photo","(userName, albumName, photoName, tagList)","<p>Adds tag to the Photo of the user in the album. @param userName Name of the\nUser whose name has to be ...\n"],["assign_roles","App42::User::UserService","App42/User/UserService.html#method-i-assign_roles","(uName, roleList)","<p>Add Role for the App @param uName UserName which should be unique for the\nApp @param roleList list of ...\n"],["authenticate","App42::User::UserService","App42/User/UserService.html#method-i-authenticate","(uName, pwd)","<p>Authenticate user based on userName and password @params uName UserName\nwhich should be unique for the ...\n"],["buildAlbumObject","App42::Gallery::AlbumResponseBuilder","App42/Gallery/AlbumResponseBuilder.html#method-i-buildAlbumObject","(albumsJSONObj)",""],["buildAlbumService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildAlbumService","()",""],["buildArrayResponse","App42::Gallery::AlbumResponseBuilder","App42/Gallery/AlbumResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::Game::GameResponseBuilder","App42/Game/GameResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::Geo::GeoResponseBuilder","App42/Geo/GeoResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::Review::ReviewResponseBuilder","App42/Review/ReviewResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::Shopping::CartResponseBuilder","App42/Shopping/CartResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::Shopping::CatalogueResponseBuilder","App42/Shopping/CatalogueResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayResponse","App42::User::UserResponseBuilder","App42/User/UserResponseBuilder.html#method-i-buildArrayResponse","(json)",""],["buildArrayRewards","App42::Game::RewardResponseBuilder","App42/Game/RewardResponseBuilder.html#method-i-buildArrayRewards","(json)",""],["buildCartObject","App42::Shopping::CartResponseBuilder","App42/Shopping/CartResponseBuilder.html#method-i-buildCartObject","(cartJSONObj)",""],["buildCartService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildCartService","()",""],["buildCatalogueObject","App42::Shopping::CatalogueResponseBuilder","App42/Shopping/CatalogueResponseBuilder.html#method-i-buildCatalogueObject","(catalogueJSONObj)",""],["buildCatalogueService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildCatalogueService","()",""],["buildEmailService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildEmailService","()",""],["buildGameObject","App42::Game::GameResponseBuilder","App42/Game/GameResponseBuilder.html#method-i-buildGameObject","(gameJSONObject)",""],["buildGameService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildGameService","()",""],["buildGeoService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildGeoService","()",""],["buildImageProcessorService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildImageProcessorService","()",""],["buildInternalObj","App42::Geo::GeoResponseBuilder","App42/Geo/GeoResponseBuilder.html#method-i-buildInternalObj","(geoObj, jsonObjGeoStorage)",""],["buildJsonDocument","App42::Storage::StorageResponseBuilder","App42/Storage/StorageResponseBuilder.html#method-i-buildJsonDocument","(document,jsonObjDoc)",""],["buildLogService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildLogService","()",""],["buildObjectFromJSONTree","App42ResponseBuilder","App42ResponseBuilder.html#method-i-buildObjectFromJSONTree","(obj,jsonObj)","<p>@param obj @param jsonObj @raise Exception\n"],["buildPhotoService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildPhotoService","()",""],["buildQueueService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildQueueService","()",""],["buildRecommendService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildRecommendService","()",""],["buildResponse","App42::Email::EmailResponseBuilder","App42/Email/EmailResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Gallery::AlbumResponseBuilder","App42/Gallery/AlbumResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Game::GameResponseBuilder","App42/Game/GameResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Game::RewardResponseBuilder","App42/Game/RewardResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Geo::GeoResponseBuilder","App42/Geo/GeoResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::ImageProcessor::ImageProcessorResponseBuilder","App42/ImageProcessor/ImageProcessorResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Log::LogResponseBuilder","App42/Log/LogResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Message::QueueResponseBuilder","App42/Message/QueueResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Recommend::RecommenderResponseBuilder","App42/Recommend/RecommenderResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Review::ReviewResponseBuilder","App42/Review/ReviewResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Shopping::CartResponseBuilder","App42/Shopping/CartResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Shopping::CatalogueResponseBuilder","App42/Shopping/CatalogueResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Social::SocialResponseBuilder","App42/Social/SocialResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Storage::StorageResponseBuilder","App42/Storage/StorageResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::Upload::UploadResponseBuilder","App42/Upload/UploadResponseBuilder.html#method-i-buildResponse","(json)",""],["buildResponse","App42::User::UserResponseBuilder","App42/User/UserResponseBuilder.html#method-i-buildResponse","(json)",""],["buildReviewService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildReviewService","()",""],["buildRewardObject","App42::Game::RewardResponseBuilder","App42/Game/RewardResponseBuilder.html#method-i-buildRewardObject","(rewardJSONObj)",""],["buildRewardService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildRewardService","()",""],["buildScoreBoardService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildScoreBoardService","()",""],["buildScoreService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildScoreService","()",""],["buildSessionResponse","App42::Session::SessionResponseBuilder","App42/Session/SessionResponseBuilder.html#method-i-buildSessionResponse","(json)",""],["buildSessionService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildSessionService","()",""],["buildSocialService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildSocialService","()",""],["buildStorageService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildStorageService","()",""],["buildUploadService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildUploadService","()",""],["buildUserObject","App42::User::UserResponseBuilder","App42/User/UserResponseBuilder.html#method-i-buildUserObject","(userJSONObj)",""],["buildUserService","App42::ServiceAPI","App42/ServiceAPI.html#method-i-buildUserService","()",""],["build_and_send","App42::Log::LogService","App42/Log/LogService.html#method-i-build_and_send","(msg,appModule,level)","<p>Builds and Logs the message @param msg Message to be logged @param module\nModule name for which the message ...\n"],["change_user_password","App42::User::UserService","App42/User/UserService.html#method-i-change_user_password","(uName, oldPwd, newPwd)","<p>Change the password for user based on the userName. @params uName UserName\nwhich should be unique for ...\n"],["check_out","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-check_out","(cartId)","<p>Checks out the Cart and put it in CheckOut Stage and returns the\nTransaction Id The transaction id has ...\n"],["compute_hmac","App42::Util","App42/Util.html#method-i-compute_hmac","(secret_key, sorted_params)",""],["create_album","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-create_album","(userName, albumName, albumDescription)","<p>Creates Album on the cloud @param userName The user to which the album\nbelongs @param albumName Name ...\n"],["create_cart","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-create_cart","(user)","<p>Creates a Cart Session for the specified User @params user User for whom\nCart Session has to be created ...\n"],["create_catalogue","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-create_catalogue","(catalogueName, catalogueDescription)","<p>Creates a Catalogue for a particular App. Categories can be added to the\nCatalogue @params catalogue ...\n"],["create_category","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-create_category","(catalogueName, categoryName, categoryDescription)","<p>Creates a Category for a particular Catalogue e.g. Books, Music etc.\n@params catalogueName Name of the ...\n"],["create_game","App42::Game::GameService","App42/Game/GameService.html#method-i-create_game","(gameName, gameDescription)","<p>Creates game on the cloud @param gameName - Name of the game that has to be\ncreated @param gameDescription ...\n"],["create_geo_points","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-create_geo_points","(geoStorageName, geoPointsList)","<p>Stores the geopints with unique handler on the cloud. Geo point data\ncontains lat, long and marker of ...\n"],["create_mail_configuration","App42::Email::EmailService","App42/Email/EmailService.html#method-i-create_mail_configuration","(emailHost, emailPort, mailId, emailPassword, isSSL)","<p>Creates Email Configuration using which in future the App developer can\nsend mail @param emailHost Email ...\n"],["create_or_update_profile","App42::User::UserService","App42/User/UserService.html#method-i-create_or_update_profile","(user)","<p>Creates or Updates User Profile. First time the Profile for the user is\ncreated and in future calls user ...\n"],["create_pull_queue","App42::Message::QueueService","App42/Message/QueueService.html#method-i-create_pull_queue","(queueName, queueDescription)","<p>Creates a type Pull Queue @param queueName The name of the queue which has\nto be created @param queue ...\n"],["create_review","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-create_review","(userID, itemID, reviewComment, reviewRating)","<p>Creates review for the specified item on the cloud @param userId The user\nwho has created the review ...\n"],["create_reward","App42::Game::RewardService","App42/Game/RewardService.html#method-i-create_reward","(rewardName, rewardDescription)","<p>Creates Reward. Reward can be Sword, Energy etc. When Reward Points have to\nbe added the Reward name ...\n"],["create_user","App42::User::UserService","App42/User/UserService.html#method-i-create_user","(uName, pwd, emailAddress)","<p>Create User for the App @params uName UserName which should be unique for\nthe App @params pwd Password ...\n"],["create_user_with_role","App42::User::UserService","App42/User/UserService.html#method-i-create_user_with_role","(uName, pwd, emailAddress, roleList)","<p>Create User for the App @param uName UserName which should be unique for\nthe App @param pwd Password ...\n"],["crop","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-crop","(name, imagePath, width, height, x, y)","<p>Crops image based on width, height and x, y coordinates. Returns the\noriginal image url and converted ...\n"],["crop_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-crop_stream","(name, imagePath, width, height, x, y)","<p>Crops image based on width, height and x, y coordinates. Returns the\noriginal image url and converted ...\n"],["debug","App42::Log::LogService","App42/Log/LogService.html#method-i-debug","( msg, appModule)","<p>Logs the debug message @param msg Message to be logged @param module Module\nname for which the message ...\n"],["decrease_quantity","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-decrease_quantity","(cartId, itemId, itemQuantity)","<p>To decrease quantity of existing item in the cart. @returns Cart object\ncontaining updated item. @raise ...\n"],["deductScore","App42::Game::ScoreService","App42/Game/ScoreService.html#method-i-deductScore","(gameName, gameUserName, gameScore)","<p>Deducts the score from users account for a particular Game @param gameName\n- Name of the game for which ...\n"],["delete","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-delete","(signature, url, params)",""],["delete_all_preferences","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-delete_all_preferences","()","<p>Delete existing preference file. @param peferenceFileName Name of the\nPrefeence File based on which recommendations ...\n"],["delete_document_by_id","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-delete_document_by_id","(dbName, collectionName, docId)","<p>Delete target document using Object Id from given db and collection. The\nObject Id will be searched in ...\n"],["delete_pull_queue","App42::Message::QueueService","App42/Message/QueueService.html#method-i-delete_pull_queue","(queueName)","<p>Deletes the Pull type Queue @param queueName The name of the queue which\nhas to be deleted @return App42Response ...\n"],["delete_storage","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-delete_storage","(storageName)","<p>Delete the specifed Geo Storage from Cloud. @return Geo object containing\nthe name of the storage that ...\n"],["delete_user","App42::User::UserService","App42/User/UserService.html#method-i-delete_user","(userName)","<p>Deletes a particular user based on userName. @params userName UserName\nwhich should be unique for the ...\n"],["earn_rewards","App42::Game::RewardService","App42/Game/RewardService.html#method-i-earn_rewards","(gameName,gameUserName,rewardName,rewardPoints)","<p>Adds the reward points to an users account. Reward Points can be earned by\nthe user which can be redeemed ...\n"],["enum","App42::Email::EmailMIME","App42/Email/EmailMIME.html#method-i-enum","(string)",""],["enum","App42::Recommend::RecommenderSimilarity","App42/Recommend/RecommenderSimilarity.html#method-i-enum","(string)",""],["enum","App42::Shopping::PaymentStatus","App42/Shopping/PaymentStatus.html#method-i-enum","(string)",""],["enum","App42::Upload::UploadFileType","App42/Upload/UploadFileType.html#method-i-enum","(string)",""],["enum","App42::User::User::UserGender","App42/User/User/UserGender.html#method-i-enum","(string)",""],["error","App42::Log::LogService","App42/Log/LogService.html#method-i-error","( msg, appModule)","<p>Logs the error message @param msg Message to be logged @param module Module\nname for which the message ...\n"],["extractFileExtension","App42::Util","App42/Util.html#method-i-extractFileExtension","(fileName)",""],["fatal","App42::Log::LogService","App42/Log/LogService.html#method-i-fatal","( msg, appModule)","<p>Logs the fatal message @param msg Message to be logged @param module Module\nname for which the message ...\n"],["fetch_log_by_date_range","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_log_by_date_range","(startDate, endDate)","<p>Fetch log messages based on Date range @param startDate Start date from\nwhich the log messages have to ...\n"],["fetch_log_by_date_range_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_log_by_date_range_by_paging","(startDate, endDate, max, offset)","<p>Fetch log messages based on Date range by paging. @param startDate Start\ndate from which the log messages ...\n"],["fetch_logs_by_debug","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_debug","()","<p>Fetch log messages based on Debug Level @return Log object containing\nfetched debug messages @raise  ...\n"],["fetch_logs_by_debug_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_debug_by_paging","(max, offset)","<p>Fetch log messages based on Debug Level by paging. @param max Maximum\nnumber of records to be fetched ...\n"],["fetch_logs_by_error","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_error","()","<p>Fetch log messages based on Error Level @return Log object containing\nfetched error messages @raise  ...\n"],["fetch_logs_by_error_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_error_by_paging","(max, offset)","<p>Fetch log messages based on Error Level by paging. @param max Maximum\nnumber of records to be fetched ...\n"],["fetch_logs_by_fatal","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_fatal","()","<p>Fetch log messages based on Fatal Level @return Log object containing\nfetched Fatal messages @raise  ...\n"],["fetch_logs_by_fatal_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_fatal_by_paging","(max, offset)","<p>Fetch log messages based on Fatal Level by paging. @param max Maximum\nnumber of records to be fetched ...\n"],["fetch_logs_by_info","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_info","()","<p>Fetch log messages based on Info Level @return Log object containing\nfetched info messages @raise App42Exception ...\n"],["fetch_logs_by_info_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_info_by_paging","(max, offset)","<p>Fetch log messages based on Info Level by paging. @param max Maximum number\nof records to be fetched ...\n"],["fetch_logs_by_level","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_level","(level)","<p>Fetch the log messages based on the Level @param level The level on which\nlogs have to be searched @return ...\n"],["fetch_logs_by_level_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_level_by_paging","(level, max, offset)","<p>Fetch the log messages based on the Level by paging. @param level The level\non which logs have to be ...\n"],["fetch_logs_by_module","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_module","(moduleName)","<p>Fetch the log messages based on the Module @param moduleName Module name\nfor which the messages has to ...\n"],["fetch_logs_by_module_and_text","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_module_and_text","(moduleName, text)","<p>Fetch log messages based on the Module and Message Text @param moduleName\nModule name for which the messages ...\n"],["fetch_logs_by_module_and_text_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_module_and_text_by_paging","(moduleName, text, max, offset)","<p>Fetch log messages based on the Module and Message Text by paging. @param\nmoduleName Module name for ...\n"],["fetch_logs_by_module_by_paging","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_by_module_by_paging","(moduleName, max, offset)","<p>Fetch the log messages based on the Module by paging. @param moduleName\nModule name for which the messages ...\n"],["fetch_logs_count_by_date_range","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_date_range","(startDate, endDate)","\n<pre>Fetch count of log messages based on Date range\n@param startDate\nStart date from which the count of log ...</pre>\n"],["fetch_logs_count_by_debug","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_debug","()","<p>Fetch  count of log messages based on Debug Level @return App42Response\nobject containing count of fetched ...\n"],["fetch_logs_count_by_error","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_error","()","<p>Fetch  count of log messages based on Error Level @return App42Response\nobject containing  count of fetched ...\n"],["fetch_logs_count_by_fatal","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_fatal","()","<p>Fetch count of log messages based on Fatal Level @return App42Response\nobject containing count of fetched ...\n"],["fetch_logs_count_by_info","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_info","()","<p>Fetch count of log messages based on Info Level @return App42Response\nobject containing count of fetched ...\n"],["fetch_logs_count_by_level","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_level","(level)","<p>Fetch the count of log messages based on the Level @param level The level\non which count of logs have ...\n"],["fetch_logs_count_by_module","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_module","(moduleName)","<p>Fetch the count of log messages based on the Module @param moduleName\nModule name for which the count ...\n"],["fetch_logs_count_by_module_and_text","App42::Log::LogService","App42/Log/LogService.html#method-i-fetch_logs_count_by_module_and_text","(moduleName, text)","<p>Fetch count of log messages based on the Module and Message Text @param\nmoduleName Module name for which ...\n"],["fill_params_with_profile_data","App42::User::UserService","App42/User/UserService.html#method-i-fill_params_with_profile_data","(profileData)","<p>Builds a Parameter string from the profileData. @param profileData\nUser.Profile object that contains ...\n"],["find_all_documents","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-find_all_documents","(dbName, collectionName)","<p>Find all documents stored in given database and collection. @param dbName\nUnique handler for storage ...\n"],["find_all_documents_by_paging","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-find_all_documents_by_paging","(dbName, collectionName, max, offset)","<p>Find all documents stored in given database and collection. @param dbName\nUnique handler for storage ...\n"],["find_all_documents_count","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-find_all_documents_count","(dbName, collectionName)","<p>Gets the count of all documents stored in given database and collection.\n@param dbName Unique handler ...\n"],["find_document_by_id","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-find_document_by_id","(dbName, collectionName, docId)","<p>Find target document by given unique object id. @param dbName Unique\nhandler for storage name @param ...\n"],["find_document_by_key_value","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-find_document_by_key_value","(dbName, collectionName, key, value)","<p>Find target document using key value serach parameter. This key value pair\nwill be searched in the JSON ...\n"],["get","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-get","(signature, url, params)",""],["getJSONObject","App42::Geo::GeoPoint","App42/Geo/GeoPoint.html#method-i-getJSONObject","()",""],["getNames","App42ResponseBuilder","App42ResponseBuilder.html#method-i-getNames","(obj)",""],["getServiceJSONObject","App42ResponseBuilder","App42ResponseBuilder.html#method-i-getServiceJSONObject","(serviceName,json)","<p>@param serviceName @param json @return @raise Exception\n"],["getTotalRecords","App42ResponseBuilder","App42ResponseBuilder.html#method-i-getTotalRecords","(json)",""],["get_album_by_name","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-get_album_by_name","(userName, albumName)","<p>Fetch all Album based on the userName and albumName @param userName The\nuser for which the album has ...\n"],["get_albums","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-get_albums","(userName)","<p>Fetches all the Albums based on the userName @param userName The user for\nwhich the albums have to be ...\n"],["get_albums_by_paging","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-get_albums_by_paging","(userName, max, offset)","<p>Fetches all the Albums based on the userName by Paging. @param userName The\nuser for which the albums ...\n"],["get_albums_count","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-get_albums_count","(userName)","<p>Fetches the count of all the Albums based on the userName @param userName\nThe user for which the count ...\n"],["get_all_attribute","App42::Session::SessionService","App42/Session/SessionService.html#method-i-get_all_attribute","(sessionId)","<p>Gets all the attributes for a given session id @params sessionId The\nsession id for which the attribute ...\n"],["get_all_files","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files","()","<p>Gets all the files for the App @return Upload object @raise App42Exception\n"],["get_all_files_by_paging","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files_by_paging","(max, offset)","<p>Gets all the files By Paging for the App @param max Maximum number of\nrecords to be fetched @param offset ...\n"],["get_all_files_by_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files_by_user","(userName)","<p>Gets the file based on user name. @param userName The name of the user for\nwhich file has to be retrieved ...\n"],["get_all_files_by_user_by_paging","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files_by_user_by_paging","(userName, max, offset)","<p>Gets the file based on user name by Paging. @param userName The name of the\nuser for which file has to ...\n"],["get_all_files_count","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files_count","()","<p>Gets count of all the files for the App @return App42Response object @raise\nApp42Exception\n"],["get_all_files_count_by_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_all_files_count_by_user","(userName)","<p>Gets the count of file based on user name. @param userName The name of the\nuser for which count of the ...\n"],["get_all_games","App42::Game::GameService","App42/Game/GameService.html#method-i-get_all_games","()","<p>Fetches all games for the App @return ArrayList of Game object containing\nall the games for the App @raise ...\n"],["get_all_games_by_paging","App42::Game::GameService","App42/Game/GameService.html#method-i-get_all_games_by_paging","(max, offset)","<p>Fetches all games for the App by paging. * @param max Maximum number of\nrecords to be fetched @param ...\n"],["get_all_games_count","App42::Game::GameService","App42/Game/GameService.html#method-i-get_all_games_count","()","<p>Fetches the count of all games for the App @return App42Response object\ncontaining count of all the  ...\n"],["get_all_points","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-get_all_points","(storageName)","<p>Get All Point from storage. @return Geo object containing all the stored\nGeo Points for the specified ...\n"],["get_all_reviews","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_all_reviews","()","<p>Fetches all reviews for the App @return ArrayList of Review object\ncontaining all the reviews for the ...\n"],["get_all_reviews_by_paging","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_all_reviews_by_paging","(max, offset)","<p>Fetches all reviews for the App by Paging. @param max Maximum number of\nrecords to be fetched @param ...\n"],["get_all_reviews_count","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_all_reviews_count","()","<p>Fetches count of all reviews for the App @return App42Response containing\ncount of all the reviews for ...\n"],["get_all_rewards","App42::Game::RewardService","App42/Game/RewardService.html#method-i-get_all_rewards","()","<p>Fetches all the Rewards @return ArrayList of Reward objects containing all\nthe rewards of the App @raise ...\n"],["get_all_rewards_by_paging","App42::Game::RewardService","App42/Game/RewardService.html#method-i-get_all_rewards_by_paging","(max, offset)","<p>Fetches all the Rewards by paging. @param max Maximum number of records to\nbe fetched @param offset  ...\n"],["get_all_rewards_count","App42::Game::RewardService","App42/Game/RewardService.html#method-i-get_all_rewards_count","()","<p>Fetches all the Rewards @return ArrayList of Reward objects containing all\nthe rewards of the App @raise ...\n"],["get_all_storage","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-get_all_storage","()","<p>Fetch the name of all storage stored on the cloud @return Geo object\ncontaining list of all the storage ...\n"],["get_all_users","App42::User::UserService","App42/User/UserService.html#method-i-get_all_users","()","<p>Gets All users details @returnReturns the list that contains all User\nObject @raise App42Exception\n"],["get_all_users_by_paging","App42::User::UserService","App42/User/UserService.html#method-i-get_all_users_by_paging","(max, offset)","<p>Gets All users By Paging @param max Maximum number of records to be fetched\n@param offset From where ...\n"],["get_all_users_count","App42::User::UserService","App42/User/UserService.html#method-i-get_all_users_count","()","<p>Gets the count of all the users @return Returns the count of all User\nexists @raise App42Exception\n"],["get_attribute","App42::Session::SessionService","App42/Session/SessionService.html#method-i-get_attribute","(sessionId,attributeName)","<p>Gets the  attribute value in a session whose session id is provided.\n@params sessionId The session id ...\n"],["get_average_review_by_item","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_average_review_by_item","(itemId)","<p>Fetches the average review for the specified itemId @param itemId The item\nfor which the average review ...\n"],["get_average_score_by_user","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_average_score_by_user","(gameName, userName)","<p>Retrieves the average game score for the specified user @param gameName -\nName of the game for which ...\n"],["get_cart_details","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_cart_details","(cartId)","<p>Fetch Cart details. Can be used by the App developer to display Cart\nDetails i.e. Items in a Cart. @params ...\n"],["get_email_configurations","App42::Email::EmailService","App42/Email/EmailService.html#method-i-get_email_configurations","()","<p>Gets all Email Configurations for the app @return Email object containing\nall Email Configurations @raise ...\n"],["get_file_by_name","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_file_by_name","(name)","<p>Gets the file based on file name. @param name The name of the file which\nhas to be retrieved @return ...\n"],["get_file_by_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_file_by_user","(name, userName)","<p>Gets the file based on user name. @param name The name of the file which\nhas to be retrieved @param user ...\n"],["get_files_by_type","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_files_by_type","(uploadFileType)","<p>Get the files based on file type. @param uploadFileType Type of the file\ne.g. Upload.AUDIO, Upload.XML ...\n"],["get_files_by_type_by_paging","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_files_by_type_by_paging","(uploadFileType, max, offset)","<p>Get the files based on file type by Paging. @param uploadFileType Type of\nthe file e.g. Upload.AUDIO ...\n"],["get_files_count_by_type","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-get_files_count_by_type","(uploadFileType)","<p>Get the count of files based on file type. @param uploadFileType Type of\nthe file e.g. Upload.AUDIO, ...\n"],["get_game_by_name","App42::Game::GameService","App42/Game/GameService.html#method-i-get_game_by_name","(gameName)","<p>Retrieves the game by the specified name @param gameName Name of the game\nthat has to be fetched @return ...\n"],["get_game_reward_points_for_user","App42::Game::RewardService","App42/Game/RewardService.html#method-i-get_game_reward_points_for_user","(gameName, userName)","<p>Fetches the reward points for a particular user @param gameName - Name of\nthe game for which reward points ...\n"],["get_highest_review_by_item","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_highest_review_by_item","(itemId)","<p>Fetches the highest review for the specified itemId @param itemId The item\nfor which the highest review ...\n"],["get_highest_score_by_user","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_highest_score_by_user","(gameName, userName)","<p>Retrieves the highest game score for the specified user @param gameName -\nName of the game for which ...\n"],["get_item","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_item","(cartId, itemId)","<p>Fetches the specified Item from the specified Cart @params cartId The cart\nid from which item has to ...\n"],["get_item_by_id","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-get_item_by_id","(catalogueName, categoryName, itemId)","<p>Fetches Item by id for a Catalogue and Category @params catalogueName Name\nof the Catalogue from which ...\n"],["get_items","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_items","(cartId)","<p>Fetches the Items from the specified Cart @params cartId The cart id from\nwhich items have to be fetched ...\n"],["get_items","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-get_items","(catalogueName)","<p>Fetches all items for a Catalogue @params catalogueName Name of the\nCatalogue from which item has to ...\n"],["get_items_by_category","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-get_items_by_category","(catalogueName, categoryName)","<p>Fetches all items for a Catalogue and Category @params catalogueName Name\nof the Catalogue from which ...\n"],["get_items_by_category_by_paging","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-get_items_by_category_by_paging","(catalogueName, categoryName, max, offset)","<p>Fetches all items for a Catalogue and Category by paging. @param\ncatalogueName Name of the Catalogue ...\n"],["get_items_count_by_category","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-get_items_count_by_category","(catalogueName, categoryName)","<p>Fetches count of all items for a Catalogue and Category @param\ncatalogueName Name of the Catalogue from ...\n"],["get_json_from_map","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-get_json_from_map","(map)","<p>@param map @return\n"],["get_locked_users","App42::User::UserService","App42/User/UserService.html#method-i-get_locked_users","()","<p>Gets All the locked users details @return Returns the list that contains\nlocked User Objects @raise  ...\n"],["get_locked_users_by_paging","App42::User::UserService","App42/User/UserService.html#method-i-get_locked_users_by_paging","(max, offset)","<p>Gets All the locked users By paging details @param max Maximum number of\nrecords to be fetched @param ...\n"],["get_locked_users_count","App42::User::UserService","App42/User/UserService.html#method-i-get_locked_users_count","()","<p>Gets the count of all the locked users @return Returns the count of locked\nUser exists @raise App42Exception ...\n"],["get_lowest_review_by_item","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_lowest_review_by_item","(itemId)","<p>Fetches the lowest review for the specified itemId @param itemId The item\nfor which the lowest review ...\n"],["get_lowest_score_by_user","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_lowest_score_by_user","(gameName, userName)","<p>Retrieves the lowest game score for the specified user @param gameName -\nName of the game for which lowest ...\n"],["get_messages","App42::Message::QueueService","App42/Message/QueueService.html#method-i-get_messages","(queueName, receiveTimeOut)","<p>Messages are retrieved and dequeued from the Queue. @param queueName The\nname of the queue which have ...\n"],["get_near_by_point","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-get_near_by_point","(storageName,lat,lng,resultLimit)","<p>Search the near by point from specified source point. Points to be searched\nshould already be stored ...\n"],["get_near_by_points_by_max_distance","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-get_near_by_points_by_max_distance","(storageName,lat,lng,distanceInKM)","<p>Search the near by point in given range(In KM) from specified source point.\nPoints to be searched should ...\n"],["get_payment_by_cart","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payment_by_cart","(cartId)","<p>Fetches Payment information for the specified Cart Id @params cartID Cart\nId for which the payment information ...\n"],["get_payment_history_all","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payment_history_all","()","<p>History of all carts. It gives all the carts which are in AUTHORIZED,\nDECLINED, PENDING state. @returns ...\n"],["get_payment_history_by_user","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payment_history_by_user","(userId)","<p>History of Carts and Payments for a User. It gives all the carts which are\nin AUTHORIZED, DECLINED,  ...\n"],["get_payments_by_status","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payments_by_status","(paymentStatus)","<p>Fetches Payment information based on Status @params paymentStatus Status of\ntype which payment information ...\n"],["get_payments_by_user","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payments_by_user","(userId)","<p>Fetches Payment information for a User. This can be used to display Order\nand Payment History @params ...\n"],["get_payments_by_user_and_status","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-get_payments_by_user_and_status","(userId, paymentStatus)","<p>Fetches Payment information based on User Id and Status @params userId User\nId for whom payment information ...\n"],["get_photos","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_photos","(userName)","<p>Fetch all the Photos based on the userName @param userName Name of the User\nwhose photos have to be fetched ...\n"],["get_photos_by_album_and_photo_name","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_photos_by_album_and_photo_name","(userName, albumName, photoName)","<p>Fetch the particular photo based on the userName, album name and photo name\n@param userName Name of the ...\n"],["get_photos_by_album_name","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_photos_by_album_name","(userName, albumName)","<p>Fetch all Photos based on the userName and album name @param userName Name\nof the User whose photos have ...\n"],["get_photos_by_album_name_by_paging","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_photos_by_album_name_by_paging","(userName, albumName, max, offset)","<p>Fetch all Photos based on the userName and album name by paging. @param\nuserName Name of the User whose ...\n"],["get_photos_count_by_album_name","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_photos_count_by_album_name","(userName, albumName)","<p>Fetch the count of all Photos based on the userName and album name @param\nuserName Name of the User whose ...\n"],["get_points_with_in_circle","App42::Geo::GeoService","App42/Geo/GeoService.html#method-i-get_points_with_in_circle","(storageName,lat,lng,radiusInKM,resultLimit)","<p>Search the near by point from specified source point with in specified\nradius. Points to be searched ...\n"],["get_review_by_item_by_paging","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_review_by_item_by_paging","(itemId, max, offset)","<p>Fetches All Reviews based on the itemId by Paging. @param itemId The item\nfor which reviews have to be ...\n"],["get_reviews_by_item","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_reviews_by_item","(itemId)","<p>Fetches All Reviews based on the itemId @param itemId The item for which\nreviews have to be fetched @return ...\n"],["get_reviews_count_by_item","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-get_reviews_count_by_item","(itemId)","<p>Fetches count of All Reviews based on the itemId @param itemId The item for\nwhich count of reviews have ...\n"],["get_reward_by_name","App42::Game::RewardService","App42/Game/RewardService.html#method-i-get_reward_by_name","(rewardName)","<p>Retrieves the reward for the specified name @param rewardName Name of the\nreward that has to be fetched ...\n"],["get_roles_by_user","App42::User::UserService","App42/User/UserService.html#method-i-get_roles_by_user","(userName)","<p>Get Roles based on userName @param userName UserName which should be unique\nfor the App @return Returns ...\n"],["get_scores_by_user","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_scores_by_user","(gameName, userName)","<p>Retrieves the scores for a game for the specified name @param gameName -\nName of the game for which score ...\n"],["get_session","App42::Session::SessionService","App42/Session/SessionService.html#method-i-get_session","(uName)","<p>Create Session for the User. If the session does not exist it will create a\nnew session @params uName ...\n"],["get_session_boolean","App42::Session::SessionService","App42/Session/SessionService.html#method-i-get_session_boolean","(uName, isCreate)","<p>Create User Session based on the isCreate boolean parameter. If isCreate is\ntrue and there is an existing ...\n"],["get_tagged_photos","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-get_tagged_photos","(userName, tag)","<p>Fetch all the Photos based on the userName and tag @param userName Name of\nthe User whose photos have ...\n"],["get_timestamp_utc","App42::Util","App42/Util.html#method-i-get_timestamp_utc","()",""],["get_timestamp_utc_from_date","App42::Util","App42/Util.html#method-i-get_timestamp_utc_from_date","(date)",""],["get_top_n_rankings","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_top_n_rankings","(gameName, max)","<p>Retrieves the Top Rankings for the specified game @param gameName - Name of\nthe game for which ranks ...\n"],["get_top_rankings","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_top_rankings","(gameName)","<p>Retrieves the Top Rankings for the specified game @param gameName - Name of\nthe game for which ranks ...\n"],["get_user","App42::User::UserService","App42/User/UserService.html#method-i-get_user","(userName)","<p>Gets user details based on userName @params userName UserName which should\nbe unique for the App @return ...\n"],["get_user_by_email_id","App42::User::UserService","App42/User/UserService.html#method-i-get_user_by_email_id","(emailId)","<p>Gets user details based on emailId @params emailId EmailId of the user to\nbe retrieved @return Returns ...\n"],["get_user_ranking","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-get_user_ranking","(gameName, userName)","<p>Retrieves the User Ranking for the specified game @param gameName - Name of\nthe game for which ranks ...\n"],["get_users_by_profile_data","App42::User::UserService","App42/User/UserService.html#method-i-get_users_by_profile_data","(profileData)","<p>Get Users based on Profile Data @param profileData Profile Data key/value\nfor which Users need to be ...\n"],["get_users_by_role","App42::User::UserService","App42/User/UserService.html#method-i-get_users_by_role","(role)","<p>Get Users based on Role @param role Role which should be unique for the App\n@return Returns User Object ...\n"],["imageMultipart","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-imageMultipart","(signature, url, params, post_params, imagePath)",""],["imageMultipartStream","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-imageMultipartStream","(signature, url, params, post_params, imagePath)",""],["increase_quantity","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-increase_quantity","(cartID, itemID, itemQuantity)","<p>To increase quantity of existing item in the cart.. @returns Cart object\ncontaining updated item. @raise ...\n"],["info","App42::Log::LogService","App42/Log/LogService.html#method-i-info","( msg, appModule)","<p>Logs the info message @param msg Message to be logged @param module Module\nname for which the message ...\n"],["initialize1","App42BadParameterException","App42BadParameterException.html#method-i-initialize1","(detailMessage)",""],["initialize1","App42Exception","App42Exception.html#method-i-initialize1","(detailMessage)",""],["initialize2","App42Exception","App42Exception.html#method-i-initialize2","(http_error_code,app_error_code)",""],["initialize3","App42BadParameterException","App42BadParameterException.html#method-i-initialize3","(detailMessage, http_error_code, app_error_code)",""],["initialize3","App42Exception","App42Exception.html#method-i-initialize3","(detailMessage, http_error_code, app_error_code)",""],["insert_json_doc_using_map","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-insert_json_doc_using_map","(dbName,collectionName,map)","<p>Save the JSON document in given database name and collection name. It\naccepts the HashMap containing ...\n"],["insert_json_document","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-insert_json_document","(dbName, collectionName, json)","<p>Save the JSON document in given database name and collection name. @param\ndbName Unique handler for storage ...\n"],["invalidate","App42::Session::SessionService","App42/Session/SessionService.html#method-i-invalidate","(sessionId)","<p>Invalidate a session based on the session id. All the attributes store in\nthe session will be lost. @params ...\n"],["isAvailable","App42::Email::EmailMIME","App42/Email/EmailMIME.html#method-i-isAvailable","(string)",""],["isAvailable","App42::Recommend::RecommenderSimilarity","App42/Recommend/RecommenderSimilarity.html#method-i-isAvailable","(string)",""],["isAvailable","App42::Shopping::PaymentStatus","App42/Shopping/PaymentStatus.html#method-i-isAvailable","(string)",""],["isAvailable","App42::Upload::UploadFileType","App42/Upload/UploadFileType.html#method-i-isAvailable","(string)",""],["isAvailable","App42::User::User::UserGender","App42/User/User/UserGender.html#method-i-isAvailable","(string)",""],["isResponseSuccess","App42ResponseBuilder","App42ResponseBuilder.html#method-i-isResponseSuccess","(json)","<p>@param json @return @raise Exception\n"],["is_empty","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-is_empty","(cartId)","<p>Checks whether the Cart is Empty or not @params cartId The cart id to check\nfor empty @returns Cart object ...\n"],["item_based","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-item_based","(userId, howMany)","<p>Item based recommendations. Recommendations and found based item similarity\nof the given user. The size ...\n"],["item_based_by_Similarity_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-item_based_by_Similarity_for_all","(recommenderSimilarity, howMany)","<p>Item based recommendations for all Users. Recommendations and found based\none item similarity. Similarity ...\n"],["item_based_by_similarity","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-item_based_by_similarity","(recommenderSimilarity, userId, howMany)","<p>Item based recommendations. Recommendations and found based one item\nsimilarity. Similarity algorithm ...\n"],["item_based_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-item_based_for_all","(howMany)","<p>Item based recommendations for all Users. Recommendations and found based\nitem similarity of the given ...\n"],["link_user_facebook_account","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_facebook_account","(userName, accessToken, appId, appSecret)","<p>Links the User Facebook access credentials to the App User account. @params\nuserName - Name of the user ...\n"],["link_user_facebook_account_with_token","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_facebook_account_with_token","(userName, accessToken)","<p>Links the User Facebook access credentials to the App User account. @params\nuserName - Name of the user ...\n"],["link_user_linkedIn_account","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_linkedIn_account","(userName, accessToken, accessTokenSecret, apiKey, secretKey)","<p>Links the User LinkedIn access credentials to the App User account.\n\n<pre>@param userName - Name of the user ...</pre>\n"],["link_user_linkedIn_account_with_token","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_linkedIn_account_with_token","(userName, accessToken, accessTokenSecret)","<p>Links the User LinkedIn access credentials to the App User account.\n\n<pre>@param userName - Name of the user ...</pre>\n"],["link_user_twitter_account","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_twitter_account","(userName, accessToken, accessTokenSecret, consumerKey, consumerSecret)","<p>Links the User Twitter access credentials to the App User account. @params\nuserName - Name of the user ...\n"],["link_user_twitter_account_with_token","App42::Social::SocialService","App42/Social/SocialService.html#method-i-link_user_twitter_account_with_token","(userName, accessToken, accessTokenSecret)","<p>Links the User Twitter access credentials to the App User account. @params\nuserName - Name of the user ...\n"],["load_preference_file","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-load_preference_file","(preferenceFilePath)","<p>Uploads peference file on the cloud. The preference file should be in CSV\nformat. This prefernce file ...\n"],["load_preference_file_stream","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-load_preference_file_stream","(inputStream)",""],["lock_user","App42::User::UserService","App42/User/UserService.html#method-i-lock_user","(uName)","<p>Locks the user based on the userName. Apps can use these feature to lock a\nuser because of reasons specific ...\n"],["map_reduce","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-map_reduce","(dbName,collectionName,mapFunction,reduceFunction)","<p>Map reduce function to search the target document. Please see detail\ninformation on map-reduce en.wikipedia.org/wiki/MapReduce ...\n"],["multipart","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-multipart","(signature, url, params, post_params, filePath)",""],["multipartStream","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-multipartStream","(signature, url, params, post_params, inputStream)",""],["mute","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-mute","(reviewId)","<p>Mutes the specified review @param reviewId The Id of the review which has\nto be muted @returnApp42Response ...\n"],["my_strip","App42::Util","App42/Util.html#method-i-my_strip","(str)",""],["new","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-c-new","(base_url)",""],["new","App42::Email::Configuration","App42/Email/Configuration.html#method-c-new","(email)",""],["new","App42::Email::EmailService","App42/Email/EmailService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Gallery::Photo","App42/Gallery/Photo.html#method-c-new","(album)",""],["new","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Game::GameService","App42/Game/GameService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Game::RewardService","App42/Game/RewardService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Game::Score","App42/Game/Score.html#method-c-new","(game)",""],["new","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Game::ScoreService","App42/Game/ScoreService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Geo::GeoService","App42/Geo/GeoService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Geo::Point","App42/Geo/Point.html#method-c-new","(geo)",""],["new","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Log::LogService","App42/Log/LogService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Log::Message","App42/Log/Message.html#method-c-new","(log)",""],["new","App42::Message::Message","App42/Message/Message.html#method-c-new","(queue)",""],["new","App42::Message::QueueService","App42/Message/QueueService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Recommend::RecommendedItem","App42/Recommend/RecommendedItem.html#method-c-new","(recommender)",""],["new","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Review::ReviewService","App42/Review/ReviewService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::ServiceAPI","App42/ServiceAPI.html#method-c-new","(api_key, secret_key)",""],["new","App42::Session::Attribute","App42/Session/Attribute.html#method-c-new","(session)",""],["new","App42::Session::SessionService","App42/Session/SessionService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Shopping::CartService","App42/Shopping/CartService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Shopping::Category","App42/Shopping/Category.html#method-c-new","(catalogue)",""],["new","App42::Shopping::Item","App42/Shopping/Item.html#method-c-new","(cart)",""],["new","App42::Shopping::Payment","App42/Shopping/Payment.html#method-c-new","(cart)",""],["new","App42::Social::SocialService","App42/Social/SocialService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Storage::JSONDocument","App42/Storage/JSONDocument.html#method-c-new","(storage)",""],["new","App42::Storage::StorageService","App42/Storage/StorageService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::Upload::File","App42/Upload/File.html#method-c-new","(upload)",""],["new","App42::Upload::UploadService","App42/Upload/UploadService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42::User::Profile","App42/User/Profile.html#method-c-new","(user)",""],["new","App42::User::UserService","App42/User/UserService.html#method-c-new","(api_key, secret_key, base_url)",""],["new","App42BadParameterException","App42BadParameterException.html#method-c-new","(*args)",""],["new","App42Exception","App42Exception.html#method-c-new","(*args)",""],["new","App42LimitException","App42LimitException.html#method-c-new","(detailMessage, http_error_code, app_error_code)",""],["new","App42NotFoundException","App42NotFoundException.html#method-c-new","(detailMessage, http_error_code, app_error_code)",""],["new","App42SecurityException","App42SecurityException.html#method-c-new","(detailMessage, http_error_code, app_error_code)",""],["payment","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-payment","(cartId, transactionID, paymentStatus)","<p>Update Payment Status of the Cart. When a Cart is checkout, it is in\nCheckout state. The payment status ...\n"],["pending_messages","App42::Message::QueueService","App42/Message/QueueService.html#method-i-pending_messages","(queueName)","<p>Messages which are pending to be dequeue. Note: Calling this method does\nnot dequeue the messages in ...\n"],["photoMultipart","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-photoMultipart","(signature, url, params, post_params, filePath)",""],["photoMultipartStream","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-photoMultipartStream","(signature, url, params, post_params, filePath)",""],["post","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-post","(signature, url, params, body)",""],["purge_pull_queue","App42::Message::QueueService","App42/Message/QueueService.html#method-i-purge_pull_queue","(queueName)","<p>Purges message on the Queue. Note: once the Queue is purged the messages\nare removed from the Queue and ...\n"],["put","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-put","(signature, url, params, body)",""],["receive_message","App42::Message::QueueService","App42/Message/QueueService.html#method-i-receive_message","(queueName, receiveTimeOut)","<p>Pulls all the message from the queue @param queueName The name of the queue\nfrom which messages have ...\n"],["receive_message_by_correlation_id","App42::Message::QueueService","App42/Message/QueueService.html#method-i-receive_message_by_correlation_id","(queueName, receiveTimeOut, correlationId)","<p>Pull message based on the correlation id @param queueName The name of the\nqueue from which the message ...\n"],["recommendMultipart","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-recommendMultipart","(signature, url, params, post_params, preferenceFile)",""],["recommendMultipartStream","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-recommendMultipartStream","(signature, url, params, post_params, inputStream)",""],["redeem_rewards","App42::Game::RewardService","App42/Game/RewardService.html#method-i-redeem_rewards","(gameName,gameUserName,rewardName,rewardPoints)","<p>Deducts the rewardpoints from the earned rewards by a user. @param gameName\n- Name of the game for which ...\n"],["remove_al_items","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-remove_al_items","(catalogueName)","<p>Removes all Items in a Catalogue @params catalogueName Name of the\nCatalogue from which item has to be ...\n"],["remove_album","App42::Gallery::AlbumService","App42/Gallery/AlbumService.html#method-i-remove_album","(userName, albumName)","<p>Removes the album based on the userName and albumName. Note: All photos\nadded to this Album will also ...\n"],["remove_all_attribute","App42::Session::SessionService","App42/Session/SessionService.html#method-i-remove_all_attribute","(sessionId)","<p>Removes all the attributes for a given session id @params sessionId The\nsession id for which the attributes ...\n"],["remove_all_files","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-remove_all_files","()","<p>Removes all the files for the App @return App42Response if deleted\nsuccessfully @raise App42Exception ...\n"],["remove_all_files_by_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-remove_all_files_by_user","(userName)","<p>Removes the file based on user name. @param userName The name of the user\nfor which file has to be removed ...\n"],["remove_all_items","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-remove_all_items","(cartId)","<p>Removes all Items from the specified Cart @params cartId The cart id from\nwhich items have to be removed ...\n"],["remove_attribute","App42::Session::SessionService","App42/Session/SessionService.html#method-i-remove_attribute","(sessionId,attributeName)","<p>Removes the  attribute from a session whose session id is provided. @params\nsessionId The session id ...\n"],["remove_email_configuration","App42::Email::EmailService","App42/Email/EmailService.html#method-i-remove_email_configuration","(emailId)","<p>Removes email configuration for the given email id. Note: In future the\ndeveloper wont be able to send ...\n"],["remove_file_by_name","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-remove_file_by_name","(name)","<p>Removes the file based on file name. @param name The name of the file which\nhas to be removed @return ...\n"],["remove_file_by_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-remove_file_by_user","(name, userName)","<p>Removes the file based on file name and user name. @param name The name of\nthe file which has to be removed ...\n"],["remove_item","App42::Shopping::CartService","App42/Shopping/CartService.html#method-i-remove_item","(cartId, itemId)","<p>Removes the specified item from the specified Cart @params cartId The cart\nid from which the item has ...\n"],["remove_item_by_id","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-remove_item_by_id","(catalogueName, categoryName, itemId)","<p>Removes Item by Id @params catalogueName Name of the Catalogue from which\nitem has to be removed @params ...\n"],["remove_items_by_category","App42::Shopping::CatalogueService","App42/Shopping/CatalogueService.html#method-i-remove_items_by_category","(catalogueName, categoryName)","<p>Removes all Items from a Catalogue and Category @params catalogueName Name\nof the Catalogue from which ...\n"],["remove_message","App42::Message::QueueService","App42/Message/QueueService.html#method-i-remove_message","(queueName, messageId)","<p>Remove message from the queue based on the message id. Note: Once the\nmessage is removed it cannot be ...\n"],["remove_photo","App42::Gallery::PhotoService","App42/Gallery/PhotoService.html#method-i-remove_photo","(userName, albumName, photoName)","<p>Removes the particular Photo from the specified Album for a particular\nuser. Note: The Photo is removed ...\n"],["reset_user_password","App42::User::UserService","App42/User/UserService.html#method-i-reset_user_password","(uName,password)","<p>Updates the User based on userName. Note: Only email can be updated.\nUsername cannot be updated. @param ...\n"],["resize","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-resize","(name, imagePath, width, height)","<p>Resize image. Returns the original image url and converted image url.\nImages are stored on the cloud ...\n"],["resize_by_percentage","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-resize_by_percentage","(name, imagePath, percentage)","<p>Resize image by Percentage. Returns the original image url and converted\nimage url. Images are stored ...\n"],["resize_by_percentage_by_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-resize_by_percentage_by_stream","(name, imagePath, percentage)","<p>Resize image by Percentage. Returns the original image url and converted\nimage url. Images are stored ...\n"],["resize_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-resize_stream","(name, imagePath, width, height)","<p>Resize image. Returns the original image url and converted image url.\nImages are stored on the cloud ...\n"],["revoke_all_roles","App42::User::UserService","App42/User/UserService.html#method-i-revoke_all_roles","(userName)","<p>Revokes the specified role from the user. @param userName UserName which\nshould be unique for the App ...\n"],["revoke_role","App42::User::UserService","App42/User/UserService.html#method-i-revoke_role","(userName, role)","<p>Revokes the specified role from the user. @param userName UserName which\nshould be unique for the App ...\n"],["save_user_score","App42::Game::ScoreBoardService","App42/Game/ScoreBoardService.html#method-i-save_user_score","(gameName, gameUserName, gameScore)","<p>Saves the User score  for a game @param gameName - Name of the game for\nwhich score has to be saved @param ...\n"],["scale","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-scale","(name, imagePath, width, height)","<p>Scales the image based on width and height. Returns the original image url\nand converted image url.  ...\n"],["scale_by_percentage","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-scale_by_percentage","(name, imagePath, percentage)","<p>Scales the image  by Percentage. Returns the original image url and\nconverted image url. Images are stored ...\n"],["scale_by_percentage_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-scale_by_percentage_stream","(name, imagePath, percentage)","<p>Scales the image  by Percentage. Returns the original image url and\nconverted image url. Images are stored ...\n"],["scale_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-scale_stream","(name, imagePath, width, height)","<p>Scales the image based on width and height. Returns the original image url\nand converted image url.  ...\n"],["send_mail","App42::Email::EmailService","App42/Email/EmailService.html#method-i-send_mail","(sendTo, sendSubject, sendMsg, fromEmail, emailMime)","<p>Sends the Email to the specified recipient with the provided detail @param\nfromEmail The Email Id using ...\n"],["send_message","App42::Message::QueueService","App42/Message/QueueService.html#method-i-send_message","(queueName, msg, exp)","<p>Send message on the queue with an expiry. The message will expire if it is\nnot pulled/dequeued before ...\n"],["setTagList","App42::Gallery::AlbumResponseBuilder","App42/Gallery/AlbumResponseBuilder.html#method-i-setTagList","(photoObj, photoJsonObj)",""],["set_attribute","App42::Session::SessionService","App42/Session/SessionService.html#method-i-set_attribute","(sessionId,attributeName,attributeValue)","<p>Sets attribute in a session whose session id is provided. Attributes are\nstored in a key value pair. ...\n"],["shopMultipart","App42::Connection::RESTConnection","App42/Connection/RESTConnection.html#method-i-shopMultipart","(signature, url, params, post_params, imageFile)",""],["sign","App42::Util","App42/Util.html#method-i-sign","(secret_key, params)",""],["slope_one","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-slope_one","(userId, howMany)","<p>Recommendations based on SlopeOne Algorithm @param peferenceFileName Name\nof the Prefeence File based ...\n"],["slope_one_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-slope_one_for_all","(howMany)","<p>Recommendations based on SlopeOne Algorithm for all Users @param\npeferenceFileName Name of the Prefeence ...\n"],["sort_convert_table","App42::Util","App42/Util.html#method-i-sort_convert_table","(table)",""],["throwExceptionIfEmailNotValid","App42::Util","App42/Util.html#method-i-throwExceptionIfEmailNotValid","(obj, name)",""],["throwExceptionIfNotValidExtension","App42::Util","App42/Util.html#method-i-throwExceptionIfNotValidExtension","(fileName, name)",""],["throwExceptionIfNotValidImageExtension","App42::Util","App42/Util.html#method-i-throwExceptionIfNotValidImageExtension","(fileName, name)",""],["throwExceptionIfNullOrBlank","App42::Util","App42/Util.html#method-i-throwExceptionIfNullOrBlank","(obj,name)",""],["thumbnail","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-thumbnail","(name, imagePath, width, height)","<p>Creates a thumbnail of the image. There is a difference between thumbnail\nand resize The thumbnail operation ...\n"],["thumbnail_by_percentage","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-thumbnail_by_percentage","(name, imagePath, percentage)","<p>Creates a thumbnail of the image by Percentage. There is a difference\nbetween thumbnail and resize The ...\n"],["thumbnail_by_percentage_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-thumbnail_by_percentage_stream","(name, imagePath, percentage)","<p>Creates a thumbnail of the image by Percentage. There is a difference\nbetween thumbnail and resize The ...\n"],["thumbnail_stream","App42::ImageProcessor::ImageProcessorService","App42/ImageProcessor/ImageProcessorService.html#method-i-thumbnail_stream","(name, imagePath, width, height)","<p>Creates a thumbnail of the image. There is a difference between thumbnail\nand resize The thumbnail operation ...\n"],["toString","App42::Shopping::Item","App42/Shopping/Item.html#method-i-toString","()",""],["to_s","App42::Email::Configuration","App42/Email/Configuration.html#method-i-to_s","()",""],["to_s","App42::Gallery::Photo","App42/Gallery/Photo.html#method-i-to_s","()",""],["to_s","App42::Geo::Point","App42/Geo/Point.html#method-i-to_s","()",""],["to_s","App42::ImageProcessor::Image","App42/ImageProcessor/Image.html#method-i-to_s","()",""],["to_s","App42::Log::Message","App42/Log/Message.html#method-i-to_s","()",""],["to_s","App42::Message::Message","App42/Message/Message.html#method-i-to_s","()",""],["to_s","App42::Recommend::RecommendedItem","App42/Recommend/RecommendedItem.html#method-i-to_s","()",""],["to_s","App42::Review::Review","App42/Review/Review.html#method-i-to_s","()",""],["to_s","App42::Shopping::Category","App42/Shopping/Category.html#method-i-to_s","()",""],["to_s","App42::Shopping::Item","App42/Shopping/Item.html#method-i-to_s","()",""],["to_s","App42::Storage::JSONDocument","App42/Storage/JSONDocument.html#method-i-to_s","()",""],["to_s","App42::User::User","App42/User/User.html#method-i-to_s","()",""],["unlock_user","App42::User::UserService","App42/User/UserService.html#method-i-unlock_user","(uName)","<p>Unlock the user based on the userName. Apps can use these feature to unlock\na user because of reasons ...\n"],["unmute","App42::Review::ReviewService","App42/Review/ReviewService.html#method-i-unmute","(reviewId)","<p>UnMutes the specified review @param reviewId The Id of the review which has\nto be unmuted @return  App42Response ...\n"],["update_document_by_doc_id","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-update_document_by_doc_id","(dbName, collectionName, docId, newJsonDoc)","<p>Update target document using the document id. @param dbName Unique handler\nfor storage name @param collection ...\n"],["update_document_by_key_value","App42::Storage::StorageService","App42/Storage/StorageService.html#method-i-update_document_by_key_value","(dbName, collectionName, key, value, newJsonDoc)","<p>Update target document using key value serach parameter. This key value\npair will be searched in the ...\n"],["update_email","App42::User::UserService","App42/User/UserService.html#method-i-update_email","(uName, emailAddress)","<p>Updates the User based on userName. Note: Only email can be updated.\nUsername cannot be updated. @params ...\n"],["update_facebook_status","App42::Social::SocialService","App42/Social/SocialService.html#method-i-update_facebook_status","(userName,status)","<p>Updates the Facebook status of the specified user. @params userName - Name\nof the user for whom the status ...\n"],["update_linkedIn_status","App42::Social::SocialService","App42/Social/SocialService.html#method-i-update_linkedIn_status","(userName, status)","<p>Updates the LinkedIn status of the specified user.\n\n<pre>@param userName - Name of the user for whom the status ...</pre>\n"],["update_social_status_for_all","App42::Social::SocialService","App42/Social/SocialService.html#method-i-update_social_status_for_all","(userName, status)","<p>Updates the status for all linked social accounts of the specified user.\n@param userName - Name of the ...\n"],["update_twitter_status","App42::Social::SocialService","App42/Social/SocialService.html#method-i-update_twitter_status","(userName,status)","<p>Updates the Twitter status of the specified user. @params userName - Name\nof the user for whom the status ...\n"],["upload_file","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-upload_file","(name, filePath, fileType, description)","<p>Uploads file on the cloud. @params name The name for the file which has to\nbe saved. It is used to retrieve ...\n"],["upload_file_by_stream","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-upload_file_by_stream","(name, inputStream, fileType, description)","<p>Uploads file on the cloud. @param name The name for the file which has to\nbe saved. It is used to retrieve ...\n"],["upload_file_for_user","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-upload_file_for_user","(name, userName, filePath, fileType, description)","<p>Uploads file on the cloud for given user. @param name The name for the file\nwhich has to be saved. It ...\n"],["upload_file_for_user_by_stream","App42::Upload::UploadService","App42/Upload/UploadService.html#method-i-upload_file_for_user_by_stream","(name, userName, inputStream, fileType, description)","<p>Uploads file on the cloud. @param name The name for the file which has to\nbe saved. It is used to retrieve ...\n"],["user_based_neighborhood","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_neighborhood","(userId, size, howMany)","<p>User based recommendations based on Neighborhood. Recommendations are found\nbased on similar users in ...\n"],["user_based_neighborhood_by_similarity","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_neighborhood_by_similarity","(recommenderSimilarity, userId, size, howMany)","<p>User based recommendations based on Neighborhood and Similarity.\nRecommendations and found based on the ...\n"],["user_based_neighborhood_by_similarity_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_neighborhood_by_similarity_for_all","(recommenderSimilarity, size, howMany)","<p>User based recommendations based on Neighborhood and Similarity for all\nUsers. Recommendations and found ...\n"],["user_based_neighborhood_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_neighborhood_for_all","(size, howMany)","<p>User based recommendations based on Neighborhood for All Users.\nRecommendations and found based similar ...\n"],["user_based_threshold","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_threshold","(userId, threshold, howMany)","<p>User based neighborhood recommendations based on Threshold. Recommendations\nare found based on Threshold ...\n"],["user_based_threshold_by_similarity_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_threshold_by_similarity_for_all","(recommenderSimilarity, threshold, howMany)","<p>User based neighborood recommendations based on Threshold for All.\nRecommendations are found based on ...\n"],["user_based_threshold_for_all","App42::Recommend::RecommenderService","App42/Recommend/RecommenderService.html#method-i-user_based_threshold_for_all","(threshold, howMany)","<p>User based neighborood recommendations based on Threshold for all Users.\nRecommendations are found based ...\n"],["validateHowMany","App42::Util","App42/Util.html#method-i-validateHowMany","(howMany)",""],["validateMax","App42::Util","App42/Util.html#method-i-validateMax","(max)",""]]}}